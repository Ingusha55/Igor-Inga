import random
import requests
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
import telebot
import logging
import schedule
import time
import threading
import asyncio
from telethon import TelegramClient
from telethon.errors import SessionPasswordNeededError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π
logging.basicConfig(
    level=logging.DEBUG,  # –ò–∑–º–µ–Ω–∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å –Ω–∞ DEBUG –¥–ª—è –±–æ–ª—å—à–µ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–Ω–∞—á–µ–Ω–∏—è –∏–∑ config.py –≤—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ —Å—é–¥–∞
BOT_TOKEN = "7235495752:AAFEY-IvXWteJEEsMnnhM-32pOqGcoW-6Ms"  # –¢–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
WEATHER_API_KEY = "ddcee32da333d6226a276f5087d34bda"  # –¢–≤–æ–π –∫–ª—é—á OpenWeatherMap
CHAT_ID = "7208003922"  # –¢–≤–æ–π Telegram ID
API_ID = 27907916  # –¢–≤–æ–π API_ID
API_HASH = "0677e0ea948df23301a0e333a0b43ac2"  # –¢–≤–æ–π api_hash

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon
client = TelegramClient('session', API_ID, API_HASH)

# –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–π–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è Telethon
loop = asyncio.new_event_loop()
asyncio.set_event_loop(loop)

# –°–ø–∏—Å–æ–∫ –∏–¥–µ–π
ideas = [
    "–®–∞—Ä–∏–∫–∏ –∏ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –≤–µ–∑–¥–µ! üéà",
    "–ì–∏—Ä–ª—è–Ω–¥—ã –º–∏–≥–∞—é—Ç, –∫–∞–∫ —Ç–≤–æ—è —É–ª—ã–±–∫–∞! ‚ú®",
    "–¢–∞–Ω—Ü—ã –ø–æ–¥ –ª—é–±–∏–º—É—é –º—É–∑—ã–∫—É! üï∫",
    "–£—é—Ç–Ω—ã–π –≤–µ—á–µ—Ä —Å —á–∞–µ–º –∏ –ø–µ—á–µ–Ω—å–∫–∞–º–∏ ‚òï",
    "–°–æ–ª–Ω—Ü–µ –∏ –º–æ–ª–Ω–∏—è, –∫–∞–∫ –Ω–∞—à–∞ —ç–º–±–ª–µ–º–∞! ‚ö°Ô∏èüåû",
    "–ö–∞—Ä–∞–æ–∫–µ —Å –¥—Ä—É–∑—å—è–º–∏! üé§",
    "–ü–∏–∫–Ω–∏–∫ —Å —à–∞—à–ª—ã–∫–∞–º–∏! üçñ",
    "–§–æ–Ω–∞—Ä–∏–∫–∏ –≤ —Å–∞–¥—É! üèÆ"
]

# –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ (15 –∫–∞–Ω–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –¥–∞–ª–∞ —Ä–∞–Ω–µ–µ)
channels = [
    '@konkretnost', '@SergeyNikolaevichBogatyrev', '@moyshasheckel', '@sharanism',
    '@diana_spletni_live', '@SwissVatnik', '@pashatoday_new', '@kotreal',
    '@NSDVDnepre', '@DneprNR', '@rasstrelny', '@dimonundmir',
    '@Pavlova_Maria_live',
    '@readovkanews',
    '@KremlinPeresmeshnik',
    '@ukr_2025_ru', '@gruboprostite',
     '@doposlednego_ukrainca', '@msk_53',
      '@pridnestrovec'
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ —Å–º–∞–π–ª–∏–∫–∞–º–∏
def create_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã")
    keyboard.add(
        KeyboardButton("–ü—Ä–∏–≤–µ—Ç üëã‚ú®"),
        KeyboardButton("–ü–æ–≥–æ–¥–∞ üåû‚òÅÔ∏è")
    )
    keyboard.add(
        KeyboardButton("–ù–æ–≤–æ—Å—Ç–∏ üì∞üì¢"),
        KeyboardButton("–ò–¥–µ–∏ –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ üéâüéà")
    )
    logger.debug("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞")
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
    bot.reply_to(
        message,
        "–ü—Ä–∏–≤–µ—Ç, –º–∏–ª–∞—è –ò–Ω–≥—É–ª—è! –¢—ã –º–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫! üéâ",
        reply_markup=create_keyboard()
    )
    logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ /start –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

# –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=['help'])
def send_help(message):
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help")
    bot.reply_to(
        message,
        "–ò–Ω–≥—É–ª—è, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞ –æ—Ç–¥—ã—Ö–∞–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π /weather! üåü",
        reply_markup=create_keyboard()
    )
    logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ /help –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

# –ö–æ–º–∞–Ω–¥–∞ /weather
@bot.message_handler(commands=['weather'])
def send_weather(message):
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /weather")
    try:
        api_key = WEATHER_API_KEY
        city = "Dnipro"
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric&lang=ru"
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã: {url}")
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥—ã: {data}")
        temp = data["main"]["temp"]
        weather = data["weather"][0]["description"]
        bot.reply_to(
            message,
            f"–ò–Ω–≥—É–ª—è, –≤ –î–Ω–µ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å–∫–µ {temp}¬∞C, {weather}! ‚òÄÔ∏è",
            reply_markup=create_keyboard()
        )
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≥–æ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã: {str(e)}")
        bot.reply_to(
            message,
            "–û–π, –ò–Ω–≥—É–ª—è, —á—Ç–æ-—Ç–æ —Å –ø–æ–≥–æ–¥–æ–π –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ! üå¶Ô∏è",
            reply_markup=create_keyboard()
        )
    except KeyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–≥–æ–¥—ã: {str(e)}")
        bot.reply_to(
            message,
            "–ò–Ω–≥—É–ª—è, –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –Ω–µ –ø—Ä–∏—à–ª–∏! –ü—Ä–æ–≤–µ—Ä—å API –∫–ª—é—á! üå¶Ô∏è",
            reply_markup=create_keyboard()
        )

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
async def get_channel_news_async(chat_id):
    logger.debug("–ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π")
    try:
        async with client:
            logger.debug("–ö–ª–∏–µ–Ω—Ç Telethon –∑–∞–ø—É—â–µ–Ω")
            for channel in channels:
                try:
                    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel}")
                    entity = await client.get_entity(channel)
                    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞ {channel}")
                    messages = await client.get_messages(entity, limit=5)
                    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {channel}")
                    bot.send_message(chat_id, f"üì¢ –ù–æ–≤–æ—Å—Ç–∏ –∏–∑ {channel}:")
                    for msg in messages:
                        if msg.message:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                            formatted_message = (
                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                                f"üïí {msg.date.strftime('%d.%m.%Y %H:%M')}\n\n"
                                f"{msg.message}\n"  # –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã
                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                            )
                            bot.send_message(chat_id, formatted_message)
                            logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {channel}: {msg.message[:50]}...")
                    bot.send_message(chat_id, " ")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å –∫–∞–Ω–∞–ª–æ–º {channel}: {str(e)}")
                    bot.send_message(chat_id, f"–û–π, –ò–Ω–≥—É–ª—è, –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ {channel} –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ? üåü")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {str(e)}")
        bot.send_message(chat_id, f"–ò–Ω–≥—É–ª—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Telegram. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑? üåà")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def get_channel_news(chat_id):
    logger.debug("–ó–∞–ø—É—Å–∫ get_channel_news")
    try:
        loop.run_until_complete(get_channel_news_async(chat_id))
        logger.debug("get_channel_news –∑–∞–≤–µ—Ä—à—ë–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_channel_news: {str(e)}")
        bot.send_message(chat_id, f"–û–π, –ò–Ω–≥—É–ª—è, –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å: {str(e)}. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ? üåü")

# –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–±—É–¥–∏–ª—å–Ω–∏–∫)
def send_daily_message():
    logger.debug("–ó–∞–ø—É—Å–∫ send_daily_message")
    try:
        bot.send_message(
            CHAT_ID,
            "–ò–Ω–≥—É–ª—è, –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –¢—ã –º–æ–π —Å–≤–µ—Ç, —Å–∏—è–π —è—Ä—á–µ —Å–æ–ª–Ω—Ü–∞! üåûüíñ"
        )
        logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ pytz, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)
def schedule_with_timezone():
    logger.debug("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
    schedule.every().day.at("08:00").do(send_daily_message)
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ 08:00 –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def run_scheduler():
    schedule_with_timezone()
    while True:
        schedule.run_pending()
        time.sleep(60)
        logger.debug("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á")

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telethon
async def init_telethon_async():
    logger.debug("–ó–∞–ø—É—Å–∫ init_telethon_async")
    try:
        await client.start(
            phone=lambda: input("–ò–Ω–≥—É–ª—è, –≤–≤–µ–¥–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å –∫–æ–¥–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä +380): "),
            code_callback=lambda: input("–ò–Ω–≥—É–ª—è, –≤–≤–µ–¥–∏ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π Telegram –ø—Ä–∏—Å–ª–∞–ª: ")
        )
        logger.info("Telethon —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except SessionPasswordNeededError:
        await client.start(
            password=input("–ò–Ω–≥—É–ª—è, –≤–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ")
        )
        logger.info("–î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telethon: {str(e)}")
        print(f"–ò–Ω–≥—É–ª—è, –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Telegram: {str(e)}. –ü—Ä–æ–≤–µ—Ä—å API_ID –∏ API_HASH!")
        raise

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
def init_telethon():
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon")
    loop.run_until_complete(init_telethon_async())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
@bot.message_handler(content_types=['text'])
def handle_text(message):
    text = message.text.lower()
    chat_id = message.chat.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
    if text == "–ø—Ä–∏–≤–µ—Ç üëã‚ú®":
        bot.reply_to(
            message,
            "–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç, –º–æ—è –∑–≤–µ–∑–¥–∞! üòä",
            reply_markup=create_keyboard()
        )
        logger.debug("–û—Ç–≤–µ—Ç –Ω–∞ '–ø—Ä–∏–≤–µ—Ç' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    elif text == "–ø–æ–≥–æ–¥–∞ üåû‚òÅÔ∏è":
        send_weather(message)
    elif text == "–Ω–æ–≤–æ—Å—Ç–∏ üì∞üì¢":
        bot.reply_to(message, "–ó–∞–≥—Ä—É–∂–∞—é –Ω–æ–≤–æ—Å—Ç–∏, –ò–Ω–≥—É–ª—è! –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ... üïí")
        news_thread = threading.Thread(target=get_channel_news, args=(chat_id,))
        news_thread.start()
        news_thread.join()
        bot.reply_to(
            message,
            "–ù–æ–≤–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –ò–Ω–≥—É–ª—è! üì∞",
            reply_markup=create_keyboard()
        )
        logger.debug("–ù–æ–≤–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
    elif text == "–∏–¥–µ–∏ –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ üéâüéà":
        bot.reply_to(
            message,
            f"–í–æ—Ç –∏–¥–µ—è, –ò–Ω–≥—É–ª—è: {random.choice(ideas)} üéâ",
            reply_markup=create_keyboard()
        )
        logger.debug("–ò–¥–µ—è –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    elif text == "–∏–Ω–≥—É–ª—è":
        bot.reply_to(
            message,
            "–û–π, –º–æ—è –º–∏–ª–∞—è –ò–Ω–≥—É–ª—è! –¢—ã –∫–∞–∫ —Å–æ–ª–Ω—ã—à–∫–æ! üåû",
            reply_markup=create_keyboard()
        )
        logger.debug("–û—Ç–≤–µ—Ç –Ω–∞ '–∏–Ω–≥—É–ª—è' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    elif "—è —Ç–µ–±—è –ª—é–±–ª—é" in text:
        bot.reply_to(
            message,
            "–ò–Ω–≥—É–ª—è, —è —Ç–æ–∂–µ —Ç–µ–±—è –ª—é–±–ª—é! –¢—ã –º–æ–π —Å–≤–µ—Ç! üíñ",
            reply_markup=create_keyboard()
        )
        logger.debug("–û—Ç–≤–µ—Ç –Ω–∞ '—è —Ç–µ–±—è –ª—é–±–ª—é' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    elif "—Å–ø–∞—Å–∏–±–æ" in text:
        bot.reply_to(
            message,
            "–í—Å—ë –¥–ª—è —Ç–µ–±—è, –ò–Ω–≥—É–ª—è üíûüåπüíñ",
            reply_markup=create_keyboard()
        )
        logger.debug("–û—Ç–≤–µ—Ç –Ω–∞ '—Å–ø–∞—Å–∏–±–æ' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    else:
        bot.reply_to(
            message,
            f"–¢—ã —Å–∫–∞–∑–∞–ª–∞: {message.text}",
            reply_markup=create_keyboard()
        )
        logger.debug(f"–û—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telethon –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
    init_telethon()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()
    logger.debug("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

    try:
        logger.info("–£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling")
        bot.delete_webhook()  # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å polling
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        bot.polling(non_stop=True, interval=3, timeout=20)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {str(e)}")
    finally:
        loop.run_until_complete(client.disconnect())
        loop.close()
        logger.debug("–°–æ–±—ã—Ç–∏–π–Ω—ã–π —Ü–∏–∫–ª –∑–∞–∫—Ä—ã—Ç")

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –ò–Ω–≥—É–ª—è! –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∞–∑–¥–Ω–∏–∫—É! üéâ")
    main()
