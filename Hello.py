import random
import requests
from telegram import Bot, Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
from telegram import ReplyKeyboardMarkup, KeyboardButton
from telethon.sync import TelegramClient
import asyncio
import logging
import threading
import schedule
import time
import flask
import os
from telegram.error import RetryAfter

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –°—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_ID = int(os.getenv('API_ID'))
API_HASH = os.getenv('API_HASH')
BOT_TOKEN = os.getenv('BOT_TOKEN')
WEATHER_API_KEY = os.getenv('WEATHER_API_KEY')
CHAT_ID = os.getenv('CHAT_ID')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω—ã
if not all([API_ID, API_HASH, BOT_TOKEN, WEATHER_API_KEY, CHAT_ID]):
    logger.error("–û–¥–Ω–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å API_ID, API_HASH, BOT_TOKEN, WEATHER_API_KEY –∏ CHAT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon
client = TelegramClient('session.session', API_ID, API_HASH)
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–æ–±—ã—Ç–∏–π–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è telethon
loop = asyncio.new_event_loop()

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app_flask = flask.Flask(__name__)
WEBHOOK_URL = f"https://igor-inga.onrender.com/{BOT_TOKEN}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
updater = Updater(token=BOT_TOKEN, use_context=True)
bot = updater.bot
dispatcher = updater.dispatcher

# –°–ø–∏—Å–æ–∫ –∏–¥–µ–π
ideas = [
    "–®–∞—Ä–∏–∫–∏ –∏ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –≤–µ–∑–¥–µ! üéà",
    "–ì–∏—Ä–ª—è–Ω–¥—ã –º–∏–≥–∞—é—Ç, –∫–∞–∫ —Ç–≤–æ—è —É–ª—ã–±–∫–∞! ‚ú®",
    "–¢–∞–Ω—Ü—ã –ø–æ–¥ –ª—é–±–∏–º—É—é –º—É–∑—ã–∫—É! üï∫",
    "–£—é—Ç–Ω—ã–π –≤–µ—á–µ—Ä —Å —á–∞–µ–º –∏ –ø–µ—á–µ–Ω—å–∫–∞–º–∏ ‚òï",
    "–°–æ–ª–Ω—Ü–µ –∏ –º–æ–ª–Ω–∏—è, –∫–∞–∫ –Ω–∞—à–∞ —ç–º–±–ª–µ–º–∞! ‚ö°Ô∏èüåû",
    "–ö–∞—Ä–∞–æ–∫–µ —Å –¥—Ä—É–∑—å—è–º–∏! üé§",
    "–ü–∏–∫–Ω–∏–∫ —Å —à–∞—à–ª—ã–∫–∞–º–∏! üçñ",
    "–§–æ–Ω–∞—Ä–∏–∫–∏ –≤ —Å–∞–¥—É! üèÆ"
]

# –¢–≤–æ–∏ –∫–∞–Ω–∞–ª—ã
channels = [
    '@konkretnost', '@SergeyNikolaevichBogatyrev', '@moyshasheckel', '@sharanism',
    '@diana_spletni_live', '@SwissVatnik', '@pashatoday_new', '@kotreal',
    '@NSDVDnepre', '@DneprNR', '@rasstrelny', '@dimonundmir',
    '@Pavlova_Maria_live', '@readovkanews', '@KremlinPeresmeshnik',
    '@ostashkonews', '@ukr_2025_ru'
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def create_keyboard():
    keyboard = [
        [KeyboardButton("–ü—Ä–∏–≤–µ—Ç üëã"), KeyboardButton("–ü–æ–≥–æ–¥–∞ ‚òÄÔ∏è")],
        [KeyboardButton("–ù–æ–≤–æ—Å—Ç–∏ üì∞"), KeyboardButton("–ò–¥–µ–∏ –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ üéà")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
def send_welcome(update: Update, context) -> None:
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
    update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, –º–∏–ª–∞—è –ò–Ω–≥—É–ª—è! –¢—ã –º–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫! üéâ", reply_markup=create_keyboard())
dispatcher.add_handler(CommandHandler("start", send_welcome))

# –ö–æ–º–∞–Ω–¥–∞ /help
def send_help(update: Update, context) -> None:
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help")
    update.message.reply_text("–ò–Ω–≥—É–ª—è, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞ –æ—Ç–¥—ã—Ö–∞–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π /weather! üåü", reply_markup=create_keyboard())
dispatcher.add_handler(CommandHandler("help", send_help))

# –ö–æ–º–∞–Ω–¥–∞ /weather
def send_weather(update: Update, context) -> None:
    logger.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /weather")
    try:
        api_key = WEATHER_API_KEY
        city = "Dnipro"
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric&lang=ru"
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        temp = data["main"]["temp"]
        weather = data["weather"][0]["description"]
        update.message.reply_text(f"–ò–Ω–≥—É–ª—è, –≤ –î–Ω–µ–ø—Ä–æ–ø–µ—Ç—Ä–æ–≤—Å–∫–µ {temp}¬∞C, {weather}! ‚òÄÔ∏è", reply_markup=create_keyboard())
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã: {str(e)}")
        update.message.reply_text(f"–û–π, –ò–Ω–≥—É–ª—è, —á—Ç–æ-—Ç–æ —Å –ø–æ–≥–æ–¥–æ–π –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å! –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ? üå¶Ô∏è", reply_markup=create_keyboard())
    except KeyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–≥–æ–¥—ã: {str(e)}")
        update.message.reply_text(f"–ò–Ω–≥—É–ª—è, –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –≥–¥–µ-—Ç–æ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å! –ü—Ä–æ–≤–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, API –∫–ª—é—á! üå¶Ô∏è", reply_markup=create_keyboard())
dispatcher.add_handler(CommandHandler("weather", send_weather))

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
async def get_channel_news_async(chat_id):
    try:
        async with client:
            for channel in channels:
                try:
                    entity = await client.get_entity(channel)
                    messages = await client.get_messages(entity, limit=5)
                    await bot.send_message(chat_id=chat_id, text=f"üì¢ –ù–æ–≤–æ—Å—Ç–∏ –∏–∑ {channel}:")
                    for msg in messages:
                        if msg.message:
                            formatted_message = (
                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                                f"üïí {msg.date.strftime('%d.%m.%Y %H:%M')}\n\n"
                                f"{msg.message}\n"
                                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                            )
                            await bot.send_message(chat_id=chat_id, text=formatted_message)
                    await bot.send_message(chat_id=chat_id, text=" ")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å –∫–∞–Ω–∞–ª–æ–º {channel}: {str(e)}")
                    await bot.send_message(chat_id=chat_id, text=f"–û–π, –ò–Ω–≥—É–ª—è, –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ {channel} –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∑–∂–µ? üåü")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram: {str(e)}")
        await bot.send_message(chat_id=chat_id, text=f"–ò–Ω–≥—É–ª—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Telegram. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑? üåà")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_async_in_thread(coro):
    future = asyncio.run_coroutine_threadsafe(coro, loop)
    return future.result()

# –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
def get_channel_news(chat_id):
    try:
        run_async_in_thread(get_channel_news_async(chat_id))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_channel_news: {str(e)}")
        bot.send_message(chat_id, f"–û–π, –ò–Ω–≥—É–ª—è, –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ? üåü")

# –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def send_daily_message():
    try:
        await bot.send_message(chat_id=CHAT_ID, text="–ò–Ω–≥—É–ª—è, –¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –¢—ã –º–æ–π —Å–≤–µ—Ç, —Å–∏—è–π —è—Ä—á–µ —Å–æ–ª–Ω—Ü–∞! üåûüíñ")
        logger.info("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
schedule.every().day.at("08:00").do(lambda: asyncio.run_coroutine_threadsafe(send_daily_message(), loop))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(60)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
def handle_text(update: Update, context) -> None:
    text = update.message.text.lower()
    chat_id = update.message.chat_id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
    if text == "–ø—Ä–∏–≤–µ—Ç üëã":
        update.message.reply_text("–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç, –º–æ—è –∑–≤–µ–∑–¥–∞! üòä", reply_markup=create_keyboard())
    elif text == "–ø–æ–≥–æ–¥–∞ ‚òÄÔ∏è":
        send_weather(update, context)
    elif text == "–Ω–æ–≤–æ—Å—Ç–∏ üì∞":
        get_channel_news(chat_id)
        update.message.reply_text("–ù–æ–≤–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, –ò–Ω–≥—É–ª—è! üì∞", reply_markup=create_keyboard())
    elif text == "–∏–¥–µ–∏ –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ üéà":
        update.message.reply_text(f"–í–æ—Ç –∏–¥–µ—è, –ò–Ω–≥—É–ª—è: {random.choice(ideas)} üéâ", reply_markup=create_keyboard())
    elif text == "–∏–Ω–≥—É–ª—è":
        update.message.reply_text("–û–π, –º–æ—è –º–∏–ª–∞—è –ò–Ω–≥—É–ª—è! –¢—ã –∫–∞–∫ —Å–æ–ª–Ω—ã—à–∫–æ! üåû", reply_markup=create_keyboard())
    elif "—è —Ç–µ–±—è –ª—é–±–ª—é" in text:
        update.message.reply_text("–ò–Ω–≥—É–ª—è, —è —Ç–æ–∂–µ —Ç–µ–±—è –ª—é–±–ª—é! –¢—ã –º–æ–π —Å–≤–µ—Ç! üíñ", reply_markup=create_keyboard())
    else:
        update.message.reply_text(f"–¢—ã —Å–∫–∞–∑–∞–ª: {text}", reply_markup=create_keyboard())
dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_text))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def run_loop():
    asyncio.set_event_loop(loop)
    loop.run_forever()

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ telethon
async def start_telethon():
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ Telethon")
        await client.connect()
        logger.info("–ö–ª–∏–µ–Ω—Ç Telethon –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telethon: {str(e)}")
        raise

# Webhook –º–∞—Ä—à—Ä—É—Ç—ã
@app_flask.route(f"/{BOT_TOKEN}", methods=["POST"])
def webhook():
    logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ–±—Ö—É–∫")
    data = flask.request.get_json()
    logger.info(f"–î–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞: {data}")
    update = Update.de_json(data, bot)
    if update:
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {update}")
        updater.dispatcher.process_update(update)
    else:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
    return "OK", 200

@app_flask.route("/")
def index():
    logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
    return "Bot is running!"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def init():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler_thread = threading.Thread(target=run_scheduler, daemon=True)
    scheduler_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–π–Ω—ã–π —Ü–∏–∫–ª –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread = threading.Thread(target=run_loop, daemon=True)
    thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º telethon
    try:
        run_async_in_thread(start_telethon())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telethon: {str(e)}")
        raise

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    max_retries = 3
    for attempt in range(max_retries):
        try:
            updater.bot.delete_webhook()
            time.sleep(2)
            updater.bot.set_webhook(url=WEBHOOK_URL)
            logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
            break
        except RetryAfter as e:
            logger.warning(f"RetryAfter –æ—à–∏–±–∫–∞: {str(e)}. –ñ–¥—ë–º {e.retry_after} —Å–µ–∫—É–Ω–¥...")
            time.sleep(e.retry_after)
            if attempt == max_retries - 1:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
                raise
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {str(e)}")
            raise

# –í—ã–∑—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init()

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –ò–Ω–≥—É–ª—è! –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∞–∑–¥–Ω–∏–∫—É! üéâ")
